{"version":3,"sources":["components/Person.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Person","name","num","deleteContact","onClick","baseUrl","axios","get","then","response","data","newObj","post","id","put","delete","Notification","message","error","className","App","useState","persons","setPersons","newName","setNewName","newNum","setNewNum","searchName","setSearchName","successMessage","setSuccessMessage","errorMessage","setErrorMessage","isError","setIsError","filtered","filter","person","toLowerCase","includes","useEffect","personService","initialPersons","catch","alert","window","confirm","item","value","onChange","event","target","onSubmit","preventDefault","newPerson","currPerson","find","updatedPerson","returnedPerson","map","length","concat","setTimeout","type","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5fd70e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ name, num, deleteContact }) => {\r\n  return (\r\n    <div>\r\n      {name} {num}\r\n      <button onClick={deleteContact}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst create = newObj => {\r\n  const request = axios.post(baseUrl, newObj);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst update = (id, newObj) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObj);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  deletePerson,\r\n}","import React from 'react'\r\n\r\nconst Notification = ({ message, error }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  if(error) {\r\n    return (\r\n      <div className=\"error\">\r\n      {message}\r\n    </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"success\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React, { useState, useEffect } from 'react';\r\nimport Person from './components/Person';\r\nimport personService from './services/persons';\r\nimport Notification from './components/Notification';\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]);\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNum, setNewNum ] = useState('');\r\n  const [ searchName, setSearchName ] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [isError, setIsError] = useState(false);\r\n  const filtered = persons.filter(person => person.name.toLowerCase().includes(searchName.toLowerCase()));\r\n\r\n  useEffect(() => {\r\n    // Grabs data from the back end on application start\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => setPersons(initialPersons))\r\n      .catch(error => alert('data could not be found'));\r\n  }, []);\r\n\r\n  const onNameInput = (event) => {\r\n    setNewName(event.target.value);\r\n  }\r\n\r\n  const onNumInput = (event) => {\r\n    setNewNum(event.target.value);\r\n  }\r\n\r\n  const onSearchInput = (event) => {\r\n    setSearchName(event.target.value);\r\n  }\r\n\r\n  // Handles logic for adding new persons\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n\r\n    // obj holding data for each paramter of a new person instance\r\n    const newPerson = {\r\n      name: newName,\r\n      num: newNum\r\n    }\r\n\r\n    // Checks if the currently entered name is the same as an already existing one\r\n    const currPerson = persons.find(person => person.name.toLowerCase() === newName.toLowerCase());\r\n\r\n    // If the person already exists then alert appropraitely\r\n    if(currPerson) {\r\n      alert(`${newPerson.name} is already added to phonebook`);\r\n\r\n      // New obj holding any updates the user may want to make - To number only here\r\n      const updatedPerson = { ...currPerson, num: newNum };\r\n\r\n      // Asks user if they would like to replace the current number with a new one\r\n      if(window.confirm(`Do you want to update ${currPerson.name}'s number with ${newNum}?`)){ \r\n        // If yes then call update function with the id of curr person & the updated data\r\n        personService\r\n          .update(currPerson.id, updatedPerson)\r\n          .then(returnedPerson => {\r\n            // maps through the current persons array checking if the ids match, if they dont then leave as is\r\n            // Otherwise if they match then replace with new data\r\n            setPersons(persons.map(person => person.id !== currPerson.id ? person : returnedPerson));\r\n          })\r\n          .catch(error => {\r\n            // If there's an error then it will alert and then filter through the array to make sure the id is removed\r\n            alert(`The note was not update. The entered number must be more than 8 letters long`);\r\n            // setPersons(persons.filter(person => person.id !== currPerson.id));\r\n          });\r\n      }\r\n      // Checks if the number isn't already stored \r\n    } else if (persons.find(person => person.num === newNum)) {\r\n      alert(`That number is already registered`);\r\n    }\r\n    // Checks if the text fields aren't empty. If they aren't then create a new Person with entered details\r\n    else if(newPerson.name.length > 1 && newPerson.num.length > 1) {\r\n      personService\r\n        .create(newPerson)\r\n        .then(returnedPerson => {\r\n          // creates a new array that concatanates the previous data + the newly created person\r\n          setPersons(persons.concat(returnedPerson));\r\n          setIsError(false);\r\n          setSuccessMessage( \r\n            `${returnedPerson.name}' was successfully created.`\r\n            );\r\n            setTimeout(() => {\r\n              setSuccessMessage(null);\r\n            }, 5000);\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(`the person could not be created. Enter a name greater than 3 characters and Number greater than 8 characters`);\r\n          setTimeout(() => {\r\n            setErrorMessage(null);\r\n          }, 5000);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Delete  contact from database - takes an ID to delete and name for displaying purposes\r\n  const deleteContact = (id, name) => {\r\n    // If player wants to delete user then call deletePerson function\r\n    if(window.confirm(`Delete ${name}?`)) {\r\n      personService\r\n        .deletePerson(id)\r\n        .then(() => {\r\n          alert(`Deleted ${name}`);\r\n          // Filter through the array and create a new array with ids that do not match\r\n          setPersons(persons.filter(item => item.id !== id));\r\n      })\r\n      .catch(error => alert('something went wrong'));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={successMessage} error={isError}/>\r\n      <Notification message={errorMessage} error={isError}/>\r\n      <div>search: <input value={searchName} onChange={onSearchInput} /></div>\r\n      <form onSubmit={addPerson}>\r\n        <div>name: <input onChange={onNameInput} /></div>\r\n        <div>number: <input onChange={onNumInput} /></div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      <h2>Numbers</h2>\r\n      { searchName === '' ? persons.map(person => <Person key={person.name} name={person.name} num={person.num} deleteContact={() => deleteContact(person.id, person.name)} />) : \r\n        filtered.map(person => <Person key={person.name} name={person.name} num={person.num} deleteContact={() => deleteContact(person.id, person.name)} />) }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}